import tkinter as tk
from tkinter import ttk, messagebox
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

def simulate_markov_chain_live():
    try:
        days = int(entry_days.get())
        num_products = int(entry_products.get())
        if days <= 0 or num_products <= 0:
            raise ValueError("Los valores deben ser mayores a cero.")

        # Matriz de transición para 5 estados (Excelente, Bueno, Regular, Defectuoso, Malo)
        transition_matrix = np.array([
            [0.6, 0.3, 0.05, 0.03, 0.02],  # Excelente -> Excelente, Bueno, Regular, Defectuoso, Malo
            [0.2, 0.5, 0.15, 0.1, 0.05],   # Bueno -> Excelente, Bueno, Regular, Defectuoso, Malo
            [0.1, 0.2, 0.5, 0.15, 0.05],   # Regular -> Excelente, Bueno, Regular, Defectuoso, Malo
            [0.05, 0.1, 0.2, 0.5, 0.15],   # Defectuoso -> Excelente, Bueno, Regular, Defectuoso, Malo
            [0.02, 0.05, 0.1, 0.2, 0.63]   # Malo -> Excelente, Bueno, Regular, Defectuoso, Malo
        ])
        
        # Estado inicial: todos los productos en el estado 'Excelente' (0)
        states = np.zeros((days, num_products), dtype=int)  # Matriz de estados de cada producto
        states[0, :] = 0  # Todos comienzan en 'Excelente'

        new_window = tk.Toplevel(root)
        new_window.title("Simulación en Tiempo Real")
        fig, ax = plt.subplots(figsize=(8, 5))
        canvas = FigureCanvasTkAgg(fig, master=new_window)
        canvas_widget = canvas.get_tk_widget()
        canvas_widget.pack()

        x_data = []
        y_data = [[], [], [], [], []]  # Contadores de estados (Excelente, Bueno, Regular, Defectuoso, Malo)
        state_names = ['Excelente', 'Bueno', 'Regular', 'Defectuoso', 'Malo']

        def update_chart(t=0):
            if t < days and new_window.winfo_exists():
                if t > 0:
                    for i in range(num_products):
                        current_state = states[t-1, i]
                        new_state = np.random.choice([0, 1, 2, 3, 4], p=transition_matrix[current_state])
                        states[t, i] = new_state

                # Contar productos en cada estado
                counts = [np.sum(states[t] == i) for i in range(5)]
                
                x_data.append(t)
                for i in range(5):
                    y_data[i].append(counts[i])
                
                ax.clear()
                for i in range(5):
                    ax.plot(x_data, y_data[i], label=state_names[i], marker='o')
                ax.set_xlabel('Tiempo (segundos)')
                ax.set_ylabel('Número de productos')
                ax.set_title('Distribución de estados en tiempo real')
                ax.legend()
                ax.grid(True)
                canvas.draw()

                new_window.after(1000, lambda: update_chart(t+1))
            else:
                messagebox.showinfo("Simulación terminada", "La simulación ha finalizado.")

        update_chart()

    except ValueError as e:
        messagebox.showerror("Error de entrada", str(e))

# Configuración de la interfaz gráfica
root = tk.Tk()
root.title("Simulación de Cadenas de Manufactura")
root.geometry("400x300")
root.configure(bg="#f0f0f0")

label_title = tk.Label(root, text="Optimización de Cadenas de Manufactura", font=("Arial", 14, "bold"), bg="#f0f0f0")
label_title.pack(pady=10)

frame_input = ttk.Frame(root)
frame_input.pack(pady=20)

label_days = ttk.Label(frame_input, text="Número de segundos (días):")
label_days.grid(row=0, column=0, padx=10, pady=10)
entry_days = ttk.Entry(frame_input, width=10)
entry_days.grid(row=0, column=1)

label_products = ttk.Label(frame_input, text="Número de productos:")
label_products.grid(row=1, column=0, padx=10, pady=10)
entry_products = ttk.Entry(frame_input, width=10)
entry_products.grid(row=1, column=1)

button_simulate = ttk.Button(root, text="Iniciar Simulación", command=simulate_markov_chain_live)
button_simulate.pack(pady=20)

root.mainloop()
